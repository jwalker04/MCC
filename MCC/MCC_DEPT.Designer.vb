'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MCC_DEPT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MCC_DEPT
    Inherits Global.System.Data.DataSet
    
    Private tableEMPLOYEE As EMPLOYEEDataTable
    
    Private tableITEM As ITEMDataTable
    
    Private tableLOGIN As LOGINDataTable
    
    Private tableMEMBER As MEMBERDataTable
    
    Private tableROLE As ROLEDataTable
    
    Private tableSALE As SALEDataTable
    
    Private tableTRANSACTION As TRANSACTIONDataTable
    
    Private relationFK_ROLE_EMPLOYEE As Global.System.Data.DataRelation
    
    Private relationFK_ITEM_TRANSACTION As Global.System.Data.DataRelation
    
    Private relationFK_SALE_TRANSACTION As Global.System.Data.DataRelation
    
    Private relationLOGIN_ROLE_FK As Global.System.Data.DataRelation
    
    Private relationSALE_EMPLOYEE_ID_FK As Global.System.Data.DataRelation
    
    Private relationSALE_MEMBER_ID_FK As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EMPLOYEE")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLOYEEDataTable(ds.Tables("EMPLOYEE")))
            End If
            If (Not (ds.Tables("ITEM")) Is Nothing) Then
                MyBase.Tables.Add(New ITEMDataTable(ds.Tables("ITEM")))
            End If
            If (Not (ds.Tables("LOGIN")) Is Nothing) Then
                MyBase.Tables.Add(New LOGINDataTable(ds.Tables("LOGIN")))
            End If
            If (Not (ds.Tables("MEMBER")) Is Nothing) Then
                MyBase.Tables.Add(New MEMBERDataTable(ds.Tables("MEMBER")))
            End If
            If (Not (ds.Tables("ROLE")) Is Nothing) Then
                MyBase.Tables.Add(New ROLEDataTable(ds.Tables("ROLE")))
            End If
            If (Not (ds.Tables("SALE")) Is Nothing) Then
                MyBase.Tables.Add(New SALEDataTable(ds.Tables("SALE")))
            End If
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EMPLOYEE() As EMPLOYEEDataTable
        Get
            Return Me.tableEMPLOYEE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEM() As ITEMDataTable
        Get
            Return Me.tableITEM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOGIN() As LOGINDataTable
        Get
            Return Me.tableLOGIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MEMBER() As MEMBERDataTable
        Get
            Return Me.tableMEMBER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ROLE() As ROLEDataTable
        Get
            Return Me.tableROLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SALE() As SALEDataTable
        Get
            Return Me.tableSALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TRANSACTION() As TRANSACTIONDataTable
        Get
            Return Me.tableTRANSACTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MCC_DEPT = CType(MyBase.Clone,MCC_DEPT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("EMPLOYEE")) Is Nothing) Then
                MyBase.Tables.Add(New EMPLOYEEDataTable(ds.Tables("EMPLOYEE")))
            End If
            If (Not (ds.Tables("ITEM")) Is Nothing) Then
                MyBase.Tables.Add(New ITEMDataTable(ds.Tables("ITEM")))
            End If
            If (Not (ds.Tables("LOGIN")) Is Nothing) Then
                MyBase.Tables.Add(New LOGINDataTable(ds.Tables("LOGIN")))
            End If
            If (Not (ds.Tables("MEMBER")) Is Nothing) Then
                MyBase.Tables.Add(New MEMBERDataTable(ds.Tables("MEMBER")))
            End If
            If (Not (ds.Tables("ROLE")) Is Nothing) Then
                MyBase.Tables.Add(New ROLEDataTable(ds.Tables("ROLE")))
            End If
            If (Not (ds.Tables("SALE")) Is Nothing) Then
                MyBase.Tables.Add(New SALEDataTable(ds.Tables("SALE")))
            End If
            If (Not (ds.Tables("TRANSACTION")) Is Nothing) Then
                MyBase.Tables.Add(New TRANSACTIONDataTable(ds.Tables("TRANSACTION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEMPLOYEE = CType(MyBase.Tables("EMPLOYEE"),EMPLOYEEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEMPLOYEE) Is Nothing) Then
                Me.tableEMPLOYEE.InitVars
            End If
        End If
        Me.tableITEM = CType(MyBase.Tables("ITEM"),ITEMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEM) Is Nothing) Then
                Me.tableITEM.InitVars
            End If
        End If
        Me.tableLOGIN = CType(MyBase.Tables("LOGIN"),LOGINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOGIN) Is Nothing) Then
                Me.tableLOGIN.InitVars
            End If
        End If
        Me.tableMEMBER = CType(MyBase.Tables("MEMBER"),MEMBERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMEMBER) Is Nothing) Then
                Me.tableMEMBER.InitVars
            End If
        End If
        Me.tableROLE = CType(MyBase.Tables("ROLE"),ROLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableROLE) Is Nothing) Then
                Me.tableROLE.InitVars
            End If
        End If
        Me.tableSALE = CType(MyBase.Tables("SALE"),SALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSALE) Is Nothing) Then
                Me.tableSALE.InitVars
            End If
        End If
        Me.tableTRANSACTION = CType(MyBase.Tables("TRANSACTION"),TRANSACTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTRANSACTION) Is Nothing) Then
                Me.tableTRANSACTION.InitVars
            End If
        End If
        Me.relationFK_ROLE_EMPLOYEE = Me.Relations("FK_ROLE_EMPLOYEE")
        Me.relationFK_ITEM_TRANSACTION = Me.Relations("FK_ITEM_TRANSACTION")
        Me.relationFK_SALE_TRANSACTION = Me.Relations("FK_SALE_TRANSACTION")
        Me.relationLOGIN_ROLE_FK = Me.Relations("LOGIN_ROLE_FK")
        Me.relationSALE_EMPLOYEE_ID_FK = Me.Relations("SALE_EMPLOYEE_ID_FK")
        Me.relationSALE_MEMBER_ID_FK = Me.Relations("SALE_MEMBER_ID_FK")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "MCC_DEPT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MCC_DEPT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEMPLOYEE = New EMPLOYEEDataTable()
        MyBase.Tables.Add(Me.tableEMPLOYEE)
        Me.tableITEM = New ITEMDataTable()
        MyBase.Tables.Add(Me.tableITEM)
        Me.tableLOGIN = New LOGINDataTable()
        MyBase.Tables.Add(Me.tableLOGIN)
        Me.tableMEMBER = New MEMBERDataTable()
        MyBase.Tables.Add(Me.tableMEMBER)
        Me.tableROLE = New ROLEDataTable()
        MyBase.Tables.Add(Me.tableROLE)
        Me.tableSALE = New SALEDataTable()
        MyBase.Tables.Add(Me.tableSALE)
        Me.tableTRANSACTION = New TRANSACTIONDataTable()
        MyBase.Tables.Add(Me.tableTRANSACTION)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_ROLE_EMPLOYEE", New Global.System.Data.DataColumn() {Me.tableROLE.ROLE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableEMPLOYEE.ROLE_IDColumn})
        Me.tableEMPLOYEE.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_ITEM_TRANSACTION", New Global.System.Data.DataColumn() {Me.tableITEM.ITEM_IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION.ITEM_IDColumn})
        Me.tableTRANSACTION.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_SALE_TRANSACTION", New Global.System.Data.DataColumn() {Me.tableSALE.SALE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION.SALE_IDColumn})
        Me.tableTRANSACTION.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationFK_ROLE_EMPLOYEE = New Global.System.Data.DataRelation("FK_ROLE_EMPLOYEE", New Global.System.Data.DataColumn() {Me.tableROLE.ROLE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableEMPLOYEE.ROLE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_ROLE_EMPLOYEE)
        Me.relationFK_ITEM_TRANSACTION = New Global.System.Data.DataRelation("FK_ITEM_TRANSACTION", New Global.System.Data.DataColumn() {Me.tableITEM.ITEM_IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION.ITEM_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_ITEM_TRANSACTION)
        Me.relationFK_SALE_TRANSACTION = New Global.System.Data.DataRelation("FK_SALE_TRANSACTION", New Global.System.Data.DataColumn() {Me.tableSALE.SALE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableTRANSACTION.SALE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_SALE_TRANSACTION)
        Me.relationLOGIN_ROLE_FK = New Global.System.Data.DataRelation("LOGIN_ROLE_FK", New Global.System.Data.DataColumn() {Me.tableROLE.ROLE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableLOGIN.ROLE_IDColumn}, false)
        Me.Relations.Add(Me.relationLOGIN_ROLE_FK)
        Me.relationSALE_EMPLOYEE_ID_FK = New Global.System.Data.DataRelation("SALE_EMPLOYEE_ID_FK", New Global.System.Data.DataColumn() {Me.tableEMPLOYEE.EMPLOYEE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSALE.EMPLOYEE_IDColumn}, false)
        Me.Relations.Add(Me.relationSALE_EMPLOYEE_ID_FK)
        Me.relationSALE_MEMBER_ID_FK = New Global.System.Data.DataRelation("SALE_MEMBER_ID_FK", New Global.System.Data.DataColumn() {Me.tableMEMBER.MEMBER_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSALE.MEMBER_IDColumn}, false)
        Me.Relations.Add(Me.relationSALE_MEMBER_ID_FK)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEMPLOYEE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeITEM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLOGIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMEMBER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeROLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTRANSACTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MCC_DEPT = New MCC_DEPT()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EMPLOYEERowChangeEventHandler(ByVal sender As Object, ByVal e As EMPLOYEERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ITEMRowChangeEventHandler(ByVal sender As Object, ByVal e As ITEMRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LOGINRowChangeEventHandler(ByVal sender As Object, ByVal e As LOGINRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MEMBERRowChangeEventHandler(ByVal sender As Object, ByVal e As MEMBERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ROLERowChangeEventHandler(ByVal sender As Object, ByVal e As ROLERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SALERowChangeEventHandler(ByVal sender As Object, ByVal e As SALERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TRANSACTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As TRANSACTIONRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EMPLOYEEDataTable
        Inherits Global.System.Data.TypedTableBase(Of EMPLOYEERow)
        
        Private columnEMPLOYEE_ID As Global.System.Data.DataColumn
        
        Private columnEMPLOYEE_NAME As Global.System.Data.DataColumn
        
        Private columnEMPLOYEE_ADDRESS As Global.System.Data.DataColumn
        
        Private columnEMPLOYEE_PHONE As Global.System.Data.DataColumn
        
        Private columnROLE_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EMPLOYEE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMPLOYEE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPLOYEE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMPLOYEE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPLOYEE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMPLOYEE_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPLOYEE_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMPLOYEE_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPLOYEE_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROLE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EMPLOYEERow
            Get
                Return CType(Me.Rows(index),EMPLOYEERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EMPLOYEERowChanging As EMPLOYEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EMPLOYEERowChanged As EMPLOYEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EMPLOYEERowDeleting As EMPLOYEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EMPLOYEERowDeleted As EMPLOYEERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEMPLOYEERow(ByVal row As EMPLOYEERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEMPLOYEERow(ByVal EMPLOYEE_ID As Decimal, ByVal EMPLOYEE_NAME As String, ByVal EMPLOYEE_ADDRESS As String, ByVal EMPLOYEE_PHONE As String, ByVal parentROLERowByFK_ROLE_EMPLOYEE As ROLERow) As EMPLOYEERow
            Dim rowEMPLOYEERow As EMPLOYEERow = CType(Me.NewRow,EMPLOYEERow)
            Dim columnValuesArray() As Object = New Object() {EMPLOYEE_ID, EMPLOYEE_NAME, EMPLOYEE_ADDRESS, EMPLOYEE_PHONE, Nothing}
            If (Not (parentROLERowByFK_ROLE_EMPLOYEE) Is Nothing) Then
                columnValuesArray(4) = parentROLERowByFK_ROLE_EMPLOYEE(0)
            End If
            rowEMPLOYEERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEMPLOYEERow)
            Return rowEMPLOYEERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEMPLOYEE_ID(ByVal EMPLOYEE_ID As Decimal) As EMPLOYEERow
            Return CType(Me.Rows.Find(New Object() {EMPLOYEE_ID}),EMPLOYEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EMPLOYEEDataTable = CType(MyBase.Clone,EMPLOYEEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EMPLOYEEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEMPLOYEE_ID = MyBase.Columns("EMPLOYEE_ID")
            Me.columnEMPLOYEE_NAME = MyBase.Columns("EMPLOYEE_NAME")
            Me.columnEMPLOYEE_ADDRESS = MyBase.Columns("EMPLOYEE_ADDRESS")
            Me.columnEMPLOYEE_PHONE = MyBase.Columns("EMPLOYEE_PHONE")
            Me.columnROLE_ID = MyBase.Columns("ROLE_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEMPLOYEE_ID = New Global.System.Data.DataColumn("EMPLOYEE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPLOYEE_ID)
            Me.columnEMPLOYEE_NAME = New Global.System.Data.DataColumn("EMPLOYEE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPLOYEE_NAME)
            Me.columnEMPLOYEE_ADDRESS = New Global.System.Data.DataColumn("EMPLOYEE_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPLOYEE_ADDRESS)
            Me.columnEMPLOYEE_PHONE = New Global.System.Data.DataColumn("EMPLOYEE_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPLOYEE_PHONE)
            Me.columnROLE_ID = New Global.System.Data.DataColumn("ROLE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLE_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEMPLOYEE_ID}, true))
            Me.columnEMPLOYEE_ID.AllowDBNull = false
            Me.columnEMPLOYEE_ID.Unique = true
            Me.columnEMPLOYEE_NAME.MaxLength = 30
            Me.columnEMPLOYEE_ADDRESS.MaxLength = 50
            Me.columnEMPLOYEE_PHONE.MaxLength = 12
            Me.columnROLE_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEMPLOYEERow() As EMPLOYEERow
            Return CType(Me.NewRow,EMPLOYEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EMPLOYEERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EMPLOYEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EMPLOYEERowChangedEvent) Is Nothing) Then
                RaiseEvent EMPLOYEERowChanged(Me, New EMPLOYEERowChangeEvent(CType(e.Row,EMPLOYEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EMPLOYEERowChangingEvent) Is Nothing) Then
                RaiseEvent EMPLOYEERowChanging(Me, New EMPLOYEERowChangeEvent(CType(e.Row,EMPLOYEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EMPLOYEERowDeletedEvent) Is Nothing) Then
                RaiseEvent EMPLOYEERowDeleted(Me, New EMPLOYEERowChangeEvent(CType(e.Row,EMPLOYEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EMPLOYEERowDeletingEvent) Is Nothing) Then
                RaiseEvent EMPLOYEERowDeleting(Me, New EMPLOYEERowChangeEvent(CType(e.Row,EMPLOYEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEMPLOYEERow(ByVal row As EMPLOYEERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EMPLOYEEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEMDataTable
        Inherits Global.System.Data.TypedTableBase(Of ITEMRow)
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnITEM_PRICE As Global.System.Data.DataColumn
        
        Private columnITEM_QUANTITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ITEM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_QUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEMRow
            Get
                Return CType(Me.Rows(index),ITEMRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMRowChanging As ITEMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMRowChanged As ITEMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMRowDeleting As ITEMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ITEMRowDeleted As ITEMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddITEMRow(ByVal row As ITEMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddITEMRow(ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Decimal, ByVal ITEM_QUANTITY As Decimal) As ITEMRow
            Dim rowITEMRow As ITEMRow = CType(Me.NewRow,ITEMRow)
            Dim columnValuesArray() As Object = New Object() {ITEM_ID, ITEM_NAME, ITEM_PRICE, ITEM_QUANTITY}
            rowITEMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEMRow)
            Return rowITEMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByITEM_ID(ByVal ITEM_ID As Decimal) As ITEMRow
            Return CType(Me.Rows.Find(New Object() {ITEM_ID}),ITEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEMDataTable = CType(MyBase.Clone,ITEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEMDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnITEM_PRICE = MyBase.Columns("ITEM_PRICE")
            Me.columnITEM_QUANTITY = MyBase.Columns("ITEM_QUANTITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnITEM_PRICE = New Global.System.Data.DataColumn("ITEM_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_PRICE)
            Me.columnITEM_QUANTITY = New Global.System.Data.DataColumn("ITEM_QUANTITY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_QUANTITY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnITEM_ID}, true))
            Me.columnITEM_ID.AllowDBNull = false
            Me.columnITEM_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewITEMRow() As ITEMRow
            Return CType(Me.NewRow,ITEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEMRowChangedEvent) Is Nothing) Then
                RaiseEvent ITEMRowChanged(Me, New ITEMRowChangeEvent(CType(e.Row,ITEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEMRowChangingEvent) Is Nothing) Then
                RaiseEvent ITEMRowChanging(Me, New ITEMRowChangeEvent(CType(e.Row,ITEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEMRowDeleted(Me, New ITEMRowChangeEvent(CType(e.Row,ITEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEMRowDeleting(Me, New ITEMRowChangeEvent(CType(e.Row,ITEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveITEMRow(ByVal row As ITEMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOGINDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOGINRow)
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnUSERNAME As Global.System.Data.DataColumn
        
        Private columnUSER_PASSWORD As Global.System.Data.DataColumn
        
        Private columnROLE_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOGIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USER_PASSWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_PASSWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROLE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOGINRow
            Get
                Return CType(Me.Rows(index),LOGINRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOGINRowChanging As LOGINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOGINRowChanged As LOGINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOGINRowDeleting As LOGINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LOGINRowDeleted As LOGINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddLOGINRow(ByVal row As LOGINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddLOGINRow(ByVal USER_ID As Decimal, ByVal USERNAME As String, ByVal USER_PASSWORD As String, ByVal parentROLERowByLOGIN_ROLE_FK As ROLERow) As LOGINRow
            Dim rowLOGINRow As LOGINRow = CType(Me.NewRow,LOGINRow)
            Dim columnValuesArray() As Object = New Object() {USER_ID, USERNAME, USER_PASSWORD, Nothing}
            If (Not (parentROLERowByLOGIN_ROLE_FK) Is Nothing) Then
                columnValuesArray(3) = parentROLERowByLOGIN_ROLE_FK(0)
            End If
            rowLOGINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOGINRow)
            Return rowLOGINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByUSER_ID(ByVal USER_ID As Decimal) As LOGINRow
            Return CType(Me.Rows.Find(New Object() {USER_ID}),LOGINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOGINDataTable = CType(MyBase.Clone,LOGINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOGINDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnUSER_PASSWORD = MyBase.Columns("USER_PASSWORD")
            Me.columnROLE_ID = MyBase.Columns("ROLE_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnUSER_PASSWORD = New Global.System.Data.DataColumn("USER_PASSWORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_PASSWORD)
            Me.columnROLE_ID = New Global.System.Data.DataColumn("ROLE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLE_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSER_ID}, true))
            Me.columnUSER_ID.AllowDBNull = false
            Me.columnUSER_ID.Unique = true
            Me.columnUSERNAME.MaxLength = 30
            Me.columnUSER_PASSWORD.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewLOGINRow() As LOGINRow
            Return CType(Me.NewRow,LOGINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOGINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOGINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOGINRowChangedEvent) Is Nothing) Then
                RaiseEvent LOGINRowChanged(Me, New LOGINRowChangeEvent(CType(e.Row,LOGINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOGINRowChangingEvent) Is Nothing) Then
                RaiseEvent LOGINRowChanging(Me, New LOGINRowChangeEvent(CType(e.Row,LOGINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOGINRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOGINRowDeleted(Me, New LOGINRowChangeEvent(CType(e.Row,LOGINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOGINRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOGINRowDeleting(Me, New LOGINRowChangeEvent(CType(e.Row,LOGINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveLOGINRow(ByVal row As LOGINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOGINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MEMBERDataTable
        Inherits Global.System.Data.TypedTableBase(Of MEMBERRow)
        
        Private columnMEMBER_ID As Global.System.Data.DataColumn
        
        Private columnMEMBER_NAME As Global.System.Data.DataColumn
        
        Private columnMEMBER_ADDRESS As Global.System.Data.DataColumn
        
        Private columnMEMBER_EMAIL As Global.System.Data.DataColumn
        
        Private columnMEMBER_PHONE As Global.System.Data.DataColumn
        
        Private columnMEMBER_PROSHOP As Global.System.Data.DataColumn
        
        Private columnMEMBER_HANDICAP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MEMBER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_PROSHOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_PROSHOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_HANDICAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_HANDICAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MEMBERRow
            Get
                Return CType(Me.Rows(index),MEMBERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MEMBERRowChanging As MEMBERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MEMBERRowChanged As MEMBERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MEMBERRowDeleting As MEMBERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MEMBERRowDeleted As MEMBERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMEMBERRow(ByVal row As MEMBERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMEMBERRow(ByVal MEMBER_ID As Decimal, ByVal MEMBER_NAME As String, ByVal MEMBER_ADDRESS As String, ByVal MEMBER_EMAIL As String, ByVal MEMBER_PHONE As String, ByVal MEMBER_PROSHOP As Decimal, ByVal MEMBER_HANDICAP As Decimal) As MEMBERRow
            Dim rowMEMBERRow As MEMBERRow = CType(Me.NewRow,MEMBERRow)
            Dim columnValuesArray() As Object = New Object() {MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_PROSHOP, MEMBER_HANDICAP}
            rowMEMBERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMEMBERRow)
            Return rowMEMBERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMEMBER_ID(ByVal MEMBER_ID As Decimal) As MEMBERRow
            Return CType(Me.Rows.Find(New Object() {MEMBER_ID}),MEMBERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MEMBERDataTable = CType(MyBase.Clone,MEMBERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MEMBERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMEMBER_ID = MyBase.Columns("MEMBER_ID")
            Me.columnMEMBER_NAME = MyBase.Columns("MEMBER_NAME")
            Me.columnMEMBER_ADDRESS = MyBase.Columns("MEMBER_ADDRESS")
            Me.columnMEMBER_EMAIL = MyBase.Columns("MEMBER_EMAIL")
            Me.columnMEMBER_PHONE = MyBase.Columns("MEMBER_PHONE")
            Me.columnMEMBER_PROSHOP = MyBase.Columns("MEMBER_PROSHOP")
            Me.columnMEMBER_HANDICAP = MyBase.Columns("MEMBER_HANDICAP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMEMBER_ID = New Global.System.Data.DataColumn("MEMBER_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_ID)
            Me.columnMEMBER_NAME = New Global.System.Data.DataColumn("MEMBER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_NAME)
            Me.columnMEMBER_ADDRESS = New Global.System.Data.DataColumn("MEMBER_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_ADDRESS)
            Me.columnMEMBER_EMAIL = New Global.System.Data.DataColumn("MEMBER_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_EMAIL)
            Me.columnMEMBER_PHONE = New Global.System.Data.DataColumn("MEMBER_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_PHONE)
            Me.columnMEMBER_PROSHOP = New Global.System.Data.DataColumn("MEMBER_PROSHOP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_PROSHOP)
            Me.columnMEMBER_HANDICAP = New Global.System.Data.DataColumn("MEMBER_HANDICAP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_HANDICAP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMEMBER_ID}, true))
            Me.columnMEMBER_ID.AllowDBNull = false
            Me.columnMEMBER_ID.Unique = true
            Me.columnMEMBER_NAME.MaxLength = 30
            Me.columnMEMBER_ADDRESS.MaxLength = 50
            Me.columnMEMBER_EMAIL.MaxLength = 30
            Me.columnMEMBER_PHONE.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMEMBERRow() As MEMBERRow
            Return CType(Me.NewRow,MEMBERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MEMBERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MEMBERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MEMBERRowChangedEvent) Is Nothing) Then
                RaiseEvent MEMBERRowChanged(Me, New MEMBERRowChangeEvent(CType(e.Row,MEMBERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MEMBERRowChangingEvent) Is Nothing) Then
                RaiseEvent MEMBERRowChanging(Me, New MEMBERRowChangeEvent(CType(e.Row,MEMBERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MEMBERRowDeletedEvent) Is Nothing) Then
                RaiseEvent MEMBERRowDeleted(Me, New MEMBERRowChangeEvent(CType(e.Row,MEMBERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MEMBERRowDeletingEvent) Is Nothing) Then
                RaiseEvent MEMBERRowDeleting(Me, New MEMBERRowChangeEvent(CType(e.Row,MEMBERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMEMBERRow(ByVal row As MEMBERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MEMBERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ROLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of ROLERow)
        
        Private columnROLE_ID As Global.System.Data.DataColumn
        
        Private columnROLE_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ROLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROLE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROLE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ROLERow
            Get
                Return CType(Me.Rows(index),ROLERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ROLERowChanging As ROLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ROLERowChanged As ROLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ROLERowDeleting As ROLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ROLERowDeleted As ROLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddROLERow(ByVal row As ROLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddROLERow(ByVal ROLE_ID As Decimal, ByVal ROLE_NAME As String) As ROLERow
            Dim rowROLERow As ROLERow = CType(Me.NewRow,ROLERow)
            Dim columnValuesArray() As Object = New Object() {ROLE_ID, ROLE_NAME}
            rowROLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowROLERow)
            Return rowROLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByROLE_ID(ByVal ROLE_ID As Decimal) As ROLERow
            Return CType(Me.Rows.Find(New Object() {ROLE_ID}),ROLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ROLEDataTable = CType(MyBase.Clone,ROLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ROLEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnROLE_ID = MyBase.Columns("ROLE_ID")
            Me.columnROLE_NAME = MyBase.Columns("ROLE_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnROLE_ID = New Global.System.Data.DataColumn("ROLE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLE_ID)
            Me.columnROLE_NAME = New Global.System.Data.DataColumn("ROLE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLE_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnROLE_ID}, true))
            Me.columnROLE_ID.AllowDBNull = false
            Me.columnROLE_ID.Unique = true
            Me.columnROLE_NAME.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewROLERow() As ROLERow
            Return CType(Me.NewRow,ROLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ROLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ROLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ROLERowChangedEvent) Is Nothing) Then
                RaiseEvent ROLERowChanged(Me, New ROLERowChangeEvent(CType(e.Row,ROLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ROLERowChangingEvent) Is Nothing) Then
                RaiseEvent ROLERowChanging(Me, New ROLERowChangeEvent(CType(e.Row,ROLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ROLERowDeletedEvent) Is Nothing) Then
                RaiseEvent ROLERowDeleted(Me, New ROLERowChangeEvent(CType(e.Row,ROLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ROLERowDeletingEvent) Is Nothing) Then
                RaiseEvent ROLERowDeleting(Me, New ROLERowChangeEvent(CType(e.Row,ROLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveROLERow(ByVal row As ROLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ROLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SALEDataTable
        Inherits Global.System.Data.TypedTableBase(Of SALERow)
        
        Private columnSALE_ID As Global.System.Data.DataColumn
        
        Private columnSALE_DATE As Global.System.Data.DataColumn
        
        Private columnSALE_TOTAL As Global.System.Data.DataColumn
        
        Private columnEMPLOYEE_ID As Global.System.Data.DataColumn
        
        Private columnMEMBER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SALE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SALE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SALE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EMPLOYEE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMPLOYEE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MEMBER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEMBER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SALERow
            Get
                Return CType(Me.Rows(index),SALERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SALERowChanging As SALERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SALERowChanged As SALERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SALERowDeleting As SALERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SALERowDeleted As SALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSALERow(ByVal row As SALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSALERow(ByVal SALE_ID As Decimal, ByVal SALE_DATE As String, ByVal SALE_TOTAL As Double, ByVal parentEMPLOYEERowBySALE_EMPLOYEE_ID_FK As EMPLOYEERow, ByVal parentMEMBERRowBySALE_MEMBER_ID_FK As MEMBERRow) As SALERow
            Dim rowSALERow As SALERow = CType(Me.NewRow,SALERow)
            Dim columnValuesArray() As Object = New Object() {SALE_ID, SALE_DATE, SALE_TOTAL, Nothing, Nothing}
            If (Not (parentEMPLOYEERowBySALE_EMPLOYEE_ID_FK) Is Nothing) Then
                columnValuesArray(3) = parentEMPLOYEERowBySALE_EMPLOYEE_ID_FK(0)
            End If
            If (Not (parentMEMBERRowBySALE_MEMBER_ID_FK) Is Nothing) Then
                columnValuesArray(4) = parentMEMBERRowBySALE_MEMBER_ID_FK(0)
            End If
            rowSALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSALERow)
            Return rowSALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySALE_ID(ByVal SALE_ID As Decimal) As SALERow
            Return CType(Me.Rows.Find(New Object() {SALE_ID}),SALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SALEDataTable = CType(MyBase.Clone,SALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SALEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSALE_ID = MyBase.Columns("SALE_ID")
            Me.columnSALE_DATE = MyBase.Columns("SALE_DATE")
            Me.columnSALE_TOTAL = MyBase.Columns("SALE_TOTAL")
            Me.columnEMPLOYEE_ID = MyBase.Columns("EMPLOYEE_ID")
            Me.columnMEMBER_ID = MyBase.Columns("MEMBER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSALE_ID = New Global.System.Data.DataColumn("SALE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_ID)
            Me.columnSALE_DATE = New Global.System.Data.DataColumn("SALE_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_DATE)
            Me.columnSALE_TOTAL = New Global.System.Data.DataColumn("SALE_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_TOTAL)
            Me.columnEMPLOYEE_ID = New Global.System.Data.DataColumn("EMPLOYEE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMPLOYEE_ID)
            Me.columnMEMBER_ID = New Global.System.Data.DataColumn("MEMBER_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEMBER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSALE_ID}, true))
            Me.columnSALE_ID.AllowDBNull = false
            Me.columnSALE_ID.Unique = true
            Me.columnSALE_DATE.MaxLength = 10
            Me.columnEMPLOYEE_ID.AllowDBNull = false
            Me.columnMEMBER_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSALERow() As SALERow
            Return CType(Me.NewRow,SALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SALERowChangedEvent) Is Nothing) Then
                RaiseEvent SALERowChanged(Me, New SALERowChangeEvent(CType(e.Row,SALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SALERowChangingEvent) Is Nothing) Then
                RaiseEvent SALERowChanging(Me, New SALERowChangeEvent(CType(e.Row,SALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SALERowDeletedEvent) Is Nothing) Then
                RaiseEvent SALERowDeleted(Me, New SALERowChangeEvent(CType(e.Row,SALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SALERowDeletingEvent) Is Nothing) Then
                RaiseEvent SALERowDeleting(Me, New SALERowChangeEvent(CType(e.Row,SALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSALERow(ByVal row As SALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TRANSACTIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of TRANSACTIONRow)
        
        Private columnTRANSACTION_ID As Global.System.Data.DataColumn
        
        Private columnSALE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnITEM_PRICE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TRANSACTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TRANSACTION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSACTION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SALE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TRANSACTIONRow
            Get
                Return CType(Me.Rows(index),TRANSACTIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRANSACTIONRowChanging As TRANSACTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRANSACTIONRowChanged As TRANSACTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRANSACTIONRowDeleting As TRANSACTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TRANSACTIONRowDeleted As TRANSACTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTRANSACTIONRow(ByVal TRANSACTION_ID As Decimal, ByVal parentSALERowByFK_SALE_TRANSACTION As SALERow, ByVal parentITEMRowByFK_ITEM_TRANSACTION As ITEMRow, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Integer) As TRANSACTIONRow
            Dim rowTRANSACTIONRow As TRANSACTIONRow = CType(Me.NewRow,TRANSACTIONRow)
            Dim columnValuesArray() As Object = New Object() {TRANSACTION_ID, Nothing, Nothing, ITEM_NAME, ITEM_PRICE}
            If (Not (parentSALERowByFK_SALE_TRANSACTION) Is Nothing) Then
                columnValuesArray(1) = parentSALERowByFK_SALE_TRANSACTION(0)
            End If
            If (Not (parentITEMRowByFK_ITEM_TRANSACTION) Is Nothing) Then
                columnValuesArray(2) = parentITEMRowByFK_ITEM_TRANSACTION(0)
            End If
            rowTRANSACTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTRANSACTIONRow)
            Return rowTRANSACTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByTRANSACTION_ID(ByVal TRANSACTION_ID As Decimal) As TRANSACTIONRow
            Return CType(Me.Rows.Find(New Object() {TRANSACTION_ID}),TRANSACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TRANSACTIONDataTable = CType(MyBase.Clone,TRANSACTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TRANSACTIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTRANSACTION_ID = MyBase.Columns("TRANSACTION_ID")
            Me.columnSALE_ID = MyBase.Columns("SALE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnITEM_PRICE = MyBase.Columns("ITEM_PRICE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTRANSACTION_ID = New Global.System.Data.DataColumn("TRANSACTION_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSACTION_ID)
            Me.columnSALE_ID = New Global.System.Data.DataColumn("SALE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnITEM_PRICE = New Global.System.Data.DataColumn("ITEM_PRICE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_PRICE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRANSACTION_ID}, true))
            Me.columnTRANSACTION_ID.AllowDBNull = false
            Me.columnTRANSACTION_ID.Unique = true
            Me.columnSALE_ID.AllowDBNull = false
            Me.columnITEM_ID.AllowDBNull = false
            Me.columnITEM_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTRANSACTIONRow() As TRANSACTIONRow
            Return CType(Me.NewRow,TRANSACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TRANSACTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TRANSACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TRANSACTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanged(Me, New TRANSACTIONRowChangeEvent(CType(e.Row,TRANSACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TRANSACTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowChanging(Me, New TRANSACTIONRowChangeEvent(CType(e.Row,TRANSACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TRANSACTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleted(Me, New TRANSACTIONRowChangeEvent(CType(e.Row,TRANSACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TRANSACTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent TRANSACTIONRowDeleting(Me, New TRANSACTIONRowChangeEvent(CType(e.Row,TRANSACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTRANSACTIONRow(ByVal row As TRANSACTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MCC_DEPT = New MCC_DEPT()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TRANSACTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EMPLOYEERow
        Inherits Global.System.Data.DataRow
        
        Private tableEMPLOYEE As EMPLOYEEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEMPLOYEE = CType(Me.Table,EMPLOYEEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEE_ID() As Decimal
            Get
                Return CType(Me(Me.tableEMPLOYEE.EMPLOYEE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableEMPLOYEE.EMPLOYEE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYEE.EMPLOYEE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMPLOYEE_NAME' in table 'EMPLOYEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYEE.EMPLOYEE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEE_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYEE.EMPLOYEE_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMPLOYEE_ADDRESS' in table 'EMPLOYEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYEE.EMPLOYEE_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEE_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEMPLOYEE.EMPLOYEE_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMPLOYEE_PHONE' in table 'EMPLOYEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEMPLOYEE.EMPLOYEE_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLE_ID() As Decimal
            Get
                Return CType(Me(Me.tableEMPLOYEE.ROLE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableEMPLOYEE.ROLE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLERow() As ROLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ROLE_EMPLOYEE")),ROLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ROLE_EMPLOYEE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEMPLOYEE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYEE.EMPLOYEE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEMPLOYEE_NAMENull()
            Me(Me.tableEMPLOYEE.EMPLOYEE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEMPLOYEE_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYEE.EMPLOYEE_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEMPLOYEE_ADDRESSNull()
            Me(Me.tableEMPLOYEE.EMPLOYEE_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEMPLOYEE_PHONENull() As Boolean
            Return Me.IsNull(Me.tableEMPLOYEE.EMPLOYEE_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEMPLOYEE_PHONENull()
            Me(Me.tableEMPLOYEE.EMPLOYEE_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSALERows() As SALERow()
            If (Me.Table.ChildRelations("SALE_EMPLOYEE_ID_FK") Is Nothing) Then
                Return New SALERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SALE_EMPLOYEE_ID_FK")),SALERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ITEMRow
        Inherits Global.System.Data.DataRow
        
        Private tableITEM As ITEMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEM = CType(Me.Table,ITEMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_ID() As Decimal
            Get
                Return CType(Me(Me.tableITEM.ITEM_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableITEM.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM.ITEM_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_PRICE' in table 'ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM.ITEM_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_QUANTITY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM.ITEM_QUANTITYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_QUANTITY' in table 'ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM.ITEM_QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableITEM.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableITEM.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_PRICENull() As Boolean
            Return Me.IsNull(Me.tableITEM.ITEM_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_PRICENull()
            Me(Me.tableITEM.ITEM_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_QUANTITYNull() As Boolean
            Return Me.IsNull(Me.tableITEM.ITEM_QUANTITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_QUANTITYNull()
            Me(Me.tableITEM.ITEM_QUANTITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRANSACTIONRows() As TRANSACTIONRow()
            If (Me.Table.ChildRelations("FK_ITEM_TRANSACTION") Is Nothing) Then
                Return New TRANSACTIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ITEM_TRANSACTION")),TRANSACTIONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LOGINRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOGIN As LOGINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOGIN = CType(Me.Table,LOGINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USER_ID() As Decimal
            Get
                Return CType(Me(Me.tableLOGIN.USER_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOGIN.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGIN.USERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USERNAME' in table 'LOGIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGIN.USERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USER_PASSWORD() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOGIN.USER_PASSWORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_PASSWORD' in table 'LOGIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGIN.USER_PASSWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLOGIN.ROLE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLE_ID' in table 'LOGIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOGIN.ROLE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLERow() As ROLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LOGIN_ROLE_FK")),ROLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LOGIN_ROLE_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableLOGIN.USERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUSERNAMENull()
            Me(Me.tableLOGIN.USERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUSER_PASSWORDNull() As Boolean
            Return Me.IsNull(Me.tableLOGIN.USER_PASSWORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUSER_PASSWORDNull()
            Me(Me.tableLOGIN.USER_PASSWORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsROLE_IDNull() As Boolean
            Return Me.IsNull(Me.tableLOGIN.ROLE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetROLE_IDNull()
            Me(Me.tableLOGIN.ROLE_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MEMBERRow
        Inherits Global.System.Data.DataRow
        
        Private tableMEMBER As MEMBERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMEMBER = CType(Me.Table,MEMBERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_ID() As Decimal
            Get
                Return CType(Me(Me.tableMEMBER.MEMBER_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_NAME' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_ADDRESS' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_EMAIL' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_PHONE' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_PROSHOP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_PROSHOPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_PROSHOP' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_PROSHOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_HANDICAP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMEMBER.MEMBER_HANDICAPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEMBER_HANDICAP' in table 'MEMBER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMEMBER.MEMBER_HANDICAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_NAMENull()
            Me(Me.tableMEMBER.MEMBER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_ADDRESSNull()
            Me(Me.tableMEMBER.MEMBER_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_EMAILNull()
            Me(Me.tableMEMBER.MEMBER_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_PHONENull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_PHONENull()
            Me(Me.tableMEMBER.MEMBER_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_PROSHOPNull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_PROSHOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_PROSHOPNull()
            Me(Me.tableMEMBER.MEMBER_PROSHOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMEMBER_HANDICAPNull() As Boolean
            Return Me.IsNull(Me.tableMEMBER.MEMBER_HANDICAPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMEMBER_HANDICAPNull()
            Me(Me.tableMEMBER.MEMBER_HANDICAPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSALERows() As SALERow()
            If (Me.Table.ChildRelations("SALE_MEMBER_ID_FK") Is Nothing) Then
                Return New SALERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SALE_MEMBER_ID_FK")),SALERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ROLERow
        Inherits Global.System.Data.DataRow
        
        Private tableROLE As ROLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableROLE = CType(Me.Table,ROLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLE_ID() As Decimal
            Get
                Return CType(Me(Me.tableROLE.ROLE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableROLE.ROLE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROLE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableROLE.ROLE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLE_NAME' in table 'ROLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableROLE.ROLE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsROLE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableROLE.ROLE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetROLE_NAMENull()
            Me(Me.tableROLE.ROLE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEMPLOYEERows() As EMPLOYEERow()
            If (Me.Table.ChildRelations("FK_ROLE_EMPLOYEE") Is Nothing) Then
                Return New EMPLOYEERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ROLE_EMPLOYEE")),EMPLOYEERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetLOGINRows() As LOGINRow()
            If (Me.Table.ChildRelations("LOGIN_ROLE_FK") Is Nothing) Then
                Return New LOGINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("LOGIN_ROLE_FK")),LOGINRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SALERow
        Inherits Global.System.Data.DataRow
        
        Private tableSALE As SALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSALE = CType(Me.Table,SALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALE_ID() As Decimal
            Get
                Return CType(Me(Me.tableSALE.SALE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSALE.SALE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALE_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSALE.SALE_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALE_DATE' in table 'SALE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSALE.SALE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALE_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSALE.SALE_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALE_TOTAL' in table 'SALE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSALE.SALE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEE_ID() As Decimal
            Get
                Return CType(Me(Me.tableSALE.EMPLOYEE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSALE.EMPLOYEE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBER_ID() As Decimal
            Get
                Return CType(Me(Me.tableSALE.MEMBER_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSALE.MEMBER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EMPLOYEERow() As EMPLOYEERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SALE_EMPLOYEE_ID_FK")),EMPLOYEERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SALE_EMPLOYEE_ID_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MEMBERRow() As MEMBERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SALE_MEMBER_ID_FK")),MEMBERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SALE_MEMBER_ID_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSALE_DATENull() As Boolean
            Return Me.IsNull(Me.tableSALE.SALE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSALE_DATENull()
            Me(Me.tableSALE.SALE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSALE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableSALE.SALE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSALE_TOTALNull()
            Me(Me.tableSALE.SALE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTRANSACTIONRows() As TRANSACTIONRow()
            If (Me.Table.ChildRelations("FK_SALE_TRANSACTION") Is Nothing) Then
                Return New TRANSACTIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SALE_TRANSACTION")),TRANSACTIONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TRANSACTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableTRANSACTION As TRANSACTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTRANSACTION = CType(Me.Table,TRANSACTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TRANSACTION_ID() As Decimal
            Get
                Return CType(Me(Me.tableTRANSACTION.TRANSACTION_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRANSACTION.TRANSACTION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALE_ID() As Decimal
            Get
                Return CType(Me(Me.tableTRANSACTION.SALE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRANSACTION.SALE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_ID() As Decimal
            Get
                Return CType(Me(Me.tableTRANSACTION.ITEM_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableTRANSACTION.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTRANSACTION.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'TRANSACTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRANSACTION.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_PRICE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTRANSACTION.ITEM_PRICEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_PRICE' in table 'TRANSACTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTRANSACTION.ITEM_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEMRow() As ITEMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ITEM_TRANSACTION")),ITEMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ITEM_TRANSACTION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALERow() As SALERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SALE_TRANSACTION")),SALERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SALE_TRANSACTION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableTRANSACTION.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_PRICENull() As Boolean
            Return Me.IsNull(Me.tableTRANSACTION.ITEM_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_PRICENull()
            Me(Me.tableTRANSACTION.ITEM_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EMPLOYEERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EMPLOYEERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EMPLOYEERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EMPLOYEERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ITEMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ITEMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ITEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LOGINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOGINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LOGINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LOGINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MEMBERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MEMBERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MEMBERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MEMBERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ROLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ROLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ROLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ROLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TRANSACTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TRANSACTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TRANSACTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TRANSACTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MCC_DEPTTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EMPLOYEETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EMPLOYEE"
            tableMapping.ColumnMappings.Add("EMPLOYEE_ID", "EMPLOYEE_ID")
            tableMapping.ColumnMappings.Add("EMPLOYEE_NAME", "EMPLOYEE_NAME")
            tableMapping.ColumnMappings.Add("EMPLOYEE_ADDRESS", "EMPLOYEE_ADDRESS")
            tableMapping.ColumnMappings.Add("EMPLOYEE_PHONE", "EMPLOYEE_PHONE")
            tableMapping.ColumnMappings.Add("ROLE_ID", "ROLE_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""EMPLOYEE"" WHERE ((""EMPLOYEE_ID"" = :Original_EMPLOYEE_ID) "& _ 
                "AND ((:IsNull_EMPLOYEE_NAME = 1 AND ""EMPLOYEE_NAME"" IS NULL) OR (""EMPLOYEE_NAME"""& _ 
                " = :Original_EMPLOYEE_NAME)) AND ((:IsNull_EMPLOYEE_ADDRESS = 1 AND ""EMPLOYEE_AD"& _ 
                "DRESS"" IS NULL) OR (""EMPLOYEE_ADDRESS"" = :Original_EMPLOYEE_ADDRESS)) AND ((:IsN"& _ 
                "ull_EMPLOYEE_PHONE = 1 AND ""EMPLOYEE_PHONE"" IS NULL) OR (""EMPLOYEE_PHONE"" = :Ori"& _ 
                "ginal_EMPLOYEE_PHONE)) AND (""ROLE_ID"" = :Original_ROLE_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_PHONE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""EMPLOYEE"" (""EMPLOYEE_ID"", ""EMPLOYEE_NAME"", ""EMPLOYEE_ADDR"& _ 
                "ESS"", ""EMPLOYEE_PHONE"", ""ROLE_ID"") VALUES (:EMPLOYEE_ID, :EMPLOYEE_NAME, :EMPLOY"& _ 
                "EE_ADDRESS, :EMPLOYEE_PHONE, :ROLE_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""EMPLOYEE"" SET ""EMPLOYEE_ID"" = :EMPLOYEE_ID, ""EMPLOYEE_NAME"" = "& _ 
                ":EMPLOYEE_NAME, ""EMPLOYEE_ADDRESS"" = :EMPLOYEE_ADDRESS, ""EMPLOYEE_PHONE"" = :EMPL"& _ 
                "OYEE_PHONE, ""ROLE_ID"" = :ROLE_ID WHERE ((""EMPLOYEE_ID"" = :Original_EMPLOYEE_ID) "& _ 
                "AND ((:IsNull_EMPLOYEE_NAME = 1 AND ""EMPLOYEE_NAME"" IS NULL) OR (""EMPLOYEE_NAME"""& _ 
                " = :Original_EMPLOYEE_NAME)) AND ((:IsNull_EMPLOYEE_ADDRESS = 1 AND ""EMPLOYEE_AD"& _ 
                "DRESS"" IS NULL) OR (""EMPLOYEE_ADDRESS"" = :Original_EMPLOYEE_ADDRESS)) AND ((:IsN"& _ 
                "ull_EMPLOYEE_PHONE = 1 AND ""EMPLOYEE_PHONE"" IS NULL) OR (""EMPLOYEE_PHONE"" = :Ori"& _ 
                "ginal_EMPLOYEE_PHONE)) AND (""ROLE_ID"" = :Original_ROLE_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_EMPLOYEE_PHONE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EMPLOYEE_ID, EMPLOYEE_NAME, EMPLOYEE_ADDRESS, EMPLOYEE_PHONE, ROLE_ID FROM"& _ 
                " MCC_DEPT.EMPLOYEE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.EMPLOYEEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.EMPLOYEEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.EMPLOYEEDataTable = New MCC_DEPT.EMPLOYEEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.EMPLOYEEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "EMPLOYEE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_EMPLOYEE_NAME As String, ByVal Original_EMPLOYEE_ADDRESS As String, ByVal Original_EMPLOYEE_PHONE As String, ByVal Original_ROLE_ID As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_EMPLOYEE_ID,Decimal)
            If (Original_EMPLOYEE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_EMPLOYEE_NAME,String)
            End If
            If (Original_EMPLOYEE_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_EMPLOYEE_ADDRESS,String)
            End If
            If (Original_EMPLOYEE_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_EMPLOYEE_PHONE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ROLE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal EMPLOYEE_ID As Decimal, ByVal EMPLOYEE_NAME As String, ByVal EMPLOYEE_ADDRESS As String, ByVal EMPLOYEE_PHONE As String, ByVal ROLE_ID As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(EMPLOYEE_ID,Decimal)
            If (EMPLOYEE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EMPLOYEE_NAME,String)
            End If
            If (EMPLOYEE_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(EMPLOYEE_ADDRESS,String)
            End If
            If (EMPLOYEE_PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(EMPLOYEE_PHONE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ROLE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal EMPLOYEE_ID As Decimal, ByVal EMPLOYEE_NAME As String, ByVal EMPLOYEE_ADDRESS As String, ByVal EMPLOYEE_PHONE As String, ByVal ROLE_ID As Decimal, ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_EMPLOYEE_NAME As String, ByVal Original_EMPLOYEE_ADDRESS As String, ByVal Original_EMPLOYEE_PHONE As String, ByVal Original_ROLE_ID As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(EMPLOYEE_ID,Decimal)
            If (EMPLOYEE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EMPLOYEE_NAME,String)
            End If
            If (EMPLOYEE_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(EMPLOYEE_ADDRESS,String)
            End If
            If (EMPLOYEE_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(EMPLOYEE_PHONE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ROLE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_EMPLOYEE_ID,Decimal)
            If (Original_EMPLOYEE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_EMPLOYEE_NAME,String)
            End If
            If (Original_EMPLOYEE_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_EMPLOYEE_ADDRESS,String)
            End If
            If (Original_EMPLOYEE_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_EMPLOYEE_PHONE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ROLE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal EMPLOYEE_NAME As String, ByVal EMPLOYEE_ADDRESS As String, ByVal EMPLOYEE_PHONE As String, ByVal ROLE_ID As Decimal, ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_EMPLOYEE_NAME As String, ByVal Original_EMPLOYEE_ADDRESS As String, ByVal Original_EMPLOYEE_PHONE As String, ByVal Original_ROLE_ID As Decimal) As Integer
            Return Me.Update(Original_EMPLOYEE_ID, EMPLOYEE_NAME, EMPLOYEE_ADDRESS, EMPLOYEE_PHONE, ROLE_ID, Original_EMPLOYEE_ID, Original_EMPLOYEE_NAME, Original_EMPLOYEE_ADDRESS, Original_EMPLOYEE_PHONE, Original_ROLE_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ITEMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ITEM"
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("ITEM_PRICE", "ITEM_PRICE")
            tableMapping.ColumnMappings.Add("ITEM_QUANTITY", "ITEM_QUANTITY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""ITEM"" WHERE ((""ITEM_ID"" = :Original_ITEM_ID) AND ((:IsNul"& _ 
                "l_ITEM_NAME = 1 AND ""ITEM_NAME"" IS NULL) OR (""ITEM_NAME"" = :Original_ITEM_NAME))"& _ 
                " AND ((:IsNull_ITEM_PRICE = 1 AND ""ITEM_PRICE"" IS NULL) OR (""ITEM_PRICE"" = :Orig"& _ 
                "inal_ITEM_PRICE)) AND ((:IsNull_ITEM_QUANTITY = 1 AND ""ITEM_QUANTITY"" IS NULL) O"& _ 
                "R (""ITEM_QUANTITY"" = :Original_ITEM_QUANTITY)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""ITEM"" (""ITEM_ID"", ""ITEM_NAME"", ""ITEM_PRICE"", ""ITEM_QUANTI"& _ 
                "TY"") VALUES (:ITEM_ID, :ITEM_NAME, :ITEM_PRICE, :ITEM_QUANTITY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""ITEM"" SET ""ITEM_ID"" = :ITEM_ID, ""ITEM_NAME"" = :ITEM_NAME, ""ITE"& _ 
                "M_PRICE"" = :ITEM_PRICE, ""ITEM_QUANTITY"" = :ITEM_QUANTITY WHERE ((""ITEM_ID"" = :Or"& _ 
                "iginal_ITEM_ID) AND ((:IsNull_ITEM_NAME = 1 AND ""ITEM_NAME"" IS NULL) OR (""ITEM_N"& _ 
                "AME"" = :Original_ITEM_NAME)) AND ((:IsNull_ITEM_PRICE = 1 AND ""ITEM_PRICE"" IS NU"& _ 
                "LL) OR (""ITEM_PRICE"" = :Original_ITEM_PRICE)) AND ((:IsNull_ITEM_QUANTITY = 1 AN"& _ 
                "D ""ITEM_QUANTITY"" IS NULL) OR (""ITEM_QUANTITY"" = :Original_ITEM_QUANTITY)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(4) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ITEM_ID, ITEM_NAME, ITEM_PRICE, ITEM_QUANTITY FROM MCC_DEPT.ITEM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM MCC_DEPT.ITEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ITEM_ID = :PARAM1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "PARAM1"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        ITEM_ID, ITEM_NAME, ITEM_PRICE, ITEM_QUANTITY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MCC_"& _ 
                "DEPT.ITEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ITEM_NAME = :PARAM1)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "PARAM1"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO ""MCC_DEPT"".""ITEM"" (""ITEM_NAME"", ""ITEM_PRICE"", ""ITEM_QUANTITY"") VALUES"& _ 
                " (:ITEM_NAME, :ITEM_PRICE, :ITEM_QUANTITY)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE       MCC_DEPT.ITEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                ITEM_NAME = :ITEM_NAME, ITEM_PRICE"& _ 
                " = :ITEM_PRICE, ITEM_QUANTITY = :ITEM_QUANTITY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ITEM_ID = :iid)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_QUANTITY"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_QUANTITY"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "iid"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._commandCollection(4).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.ITEMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.ITEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.ITEMDataTable = New MCC_DEPT.ITEMDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByItemName(ByVal dataTable As MCC_DEPT.ITEMDataTable, ByVal PARAM1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.ITEMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "ITEM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_QUANTITY As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ITEM_ID,Decimal)
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_QUANTITY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ITEM_QUANTITY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_QUANTITY As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ITEM_ID,Decimal)
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_QUANTITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ITEM_QUANTITY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_QUANTITY As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_QUANTITY As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ITEM_ID,Decimal)
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ITEM_QUANTITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ITEM_QUANTITY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ITEM_ID,Decimal)
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ITEM_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_QUANTITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ITEM_QUANTITY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_QUANTITY As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_ITEM_QUANTITY As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_ITEM_ID, ITEM_NAME, ITEM_PRICE, ITEM_QUANTITY, Original_ITEM_ID, Original_ITEM_NAME, Original_ITEM_PRICE, Original_ITEM_QUANTITY)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteItem(ByVal PARAM1 As Decimal) As Integer
            Dim command As Global.Devart.Data.Oracle.OracleCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(PARAM1,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertItem(ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_QUANTITY As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.Devart.Data.Oracle.OracleCommand = Me.CommandCollection(3)
            If (ITEM_NAME Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_QUANTITY.HasValue = true) Then
                command.Parameters(2).Value = CType(ITEM_QUANTITY.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateItem(ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Decimal), ByVal ITEM_QUANTITY As Global.System.Nullable(Of Decimal), ByVal iid As Decimal) As Integer
            Dim command As Global.Devart.Data.Oracle.OracleCommand = Me.CommandCollection(4)
            If (ITEM_NAME Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_PRICE.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ITEM_QUANTITY.HasValue = true) Then
                command.Parameters(2).Value = CType(ITEM_QUANTITY.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(iid,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOGINTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOGIN"
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("USER_PASSWORD", "USER_PASSWORD")
            tableMapping.ColumnMappings.Add("ROLE_ID", "ROLE_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""LOGIN"" WHERE ((""USER_ID"" = :Original_USER_ID) AND ((:IsNu"& _ 
                "ll_USERNAME = 1 AND ""USERNAME"" IS NULL) OR (""USERNAME"" = :Original_USERNAME)) AN"& _ 
                "D ((:IsNull_USER_PASSWORD = 1 AND ""USER_PASSWORD"" IS NULL) OR (""USER_PASSWORD"" ="& _ 
                " :Original_USER_PASSWORD)) AND ((:IsNull_ROLE_ID = 1 AND ""ROLE_ID"" IS NULL) OR ("& _ 
                """ROLE_ID"" = :Original_ROLE_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "USER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_USERNAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USERNAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_USER_PASSWORD"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USER_PASSWORD"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ROLE_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""LOGIN"" (""USER_ID"", ""USERNAME"", ""USER_PASSWORD"", ""ROLE_ID"""& _ 
                ") VALUES (:USER_ID, :USERNAME, :USER_PASSWORD, :ROLE_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "USER_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USERNAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USER_PASSWORD"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""LOGIN"" SET ""USER_ID"" = :USER_ID, ""USERNAME"" = :USERNAME, ""USER"& _ 
                "_PASSWORD"" = :USER_PASSWORD, ""ROLE_ID"" = :ROLE_ID WHERE ((""USER_ID"" = :Original_"& _ 
                "USER_ID) AND ((:IsNull_USERNAME = 1 AND ""USERNAME"" IS NULL) OR (""USERNAME"" = :Or"& _ 
                "iginal_USERNAME)) AND ((:IsNull_USER_PASSWORD = 1 AND ""USER_PASSWORD"" IS NULL) O"& _ 
                "R (""USER_PASSWORD"" = :Original_USER_PASSWORD)) AND ((:IsNull_ROLE_ID = 1 AND ""RO"& _ 
                "LE_ID"" IS NULL) OR (""ROLE_ID"" = :Original_ROLE_ID)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "USER_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USERNAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "USER_PASSWORD"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "USER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_USERNAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USERNAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_USER_PASSWORD"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_USER_PASSWORD"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ROLE_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT USER_ID, USERNAME, USER_PASSWORD, ROLE_ID FROM MCC_DEPT.LOGIN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        USER_ID, USERNAME, USER_PASSWORD, ROLE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            MCC_DEPT"& _ 
                ".LOGIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (USERNAME = :PARAM1) AND (USER_PASSWORD = :PARAM2)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "PARAM1"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "USERNAME"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "PARAM2"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = "USER_PASSWORD"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.LOGINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.LOGINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.LOGINDataTable = New MCC_DEPT.LOGINDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByUserNamePassword(ByVal dataTable As MCC_DEPT.LOGINDataTable, ByVal PARAM1 As String, ByVal PARAM2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (PARAM2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PARAM2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal PARAM1 As String, ByVal PARAM2 As String) As MCC_DEPT.LOGINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (PARAM2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PARAM2,String)
            End If
            Dim dataTable As MCC_DEPT.LOGINDataTable = New MCC_DEPT.LOGINDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.LOGINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "LOGIN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USER_ID As Decimal, ByVal Original_USERNAME As String, ByVal Original_USER_PASSWORD As String, ByVal Original_ROLE_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USER_ID,Decimal)
            If (Original_USERNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_USERNAME,String)
            End If
            If (Original_USER_PASSWORD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_USER_PASSWORD,String)
            End If
            If (Original_ROLE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ROLE_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal USER_ID As Decimal, ByVal USERNAME As String, ByVal USER_PASSWORD As String, ByVal ROLE_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(USER_ID,Decimal)
            If (USERNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(USERNAME,String)
            End If
            If (USER_PASSWORD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USER_PASSWORD,String)
            End If
            If (ROLE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ROLE_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal USER_ID As Decimal, ByVal USERNAME As String, ByVal USER_PASSWORD As String, ByVal ROLE_ID As Global.System.Nullable(Of Decimal), ByVal Original_USER_ID As Decimal, ByVal Original_USERNAME As String, ByVal Original_USER_PASSWORD As String, ByVal Original_ROLE_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(USER_ID,Decimal)
            If (USERNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(USERNAME,String)
            End If
            If (USER_PASSWORD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USER_PASSWORD,String)
            End If
            If (ROLE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ROLE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_USER_ID,Decimal)
            If (Original_USERNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_USERNAME,String)
            End If
            If (Original_USER_PASSWORD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_USER_PASSWORD,String)
            End If
            If (Original_ROLE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ROLE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal USERNAME As String, ByVal USER_PASSWORD As String, ByVal ROLE_ID As Global.System.Nullable(Of Decimal), ByVal Original_USER_ID As Decimal, ByVal Original_USERNAME As String, ByVal Original_USER_PASSWORD As String, ByVal Original_ROLE_ID As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_USER_ID, USERNAME, USER_PASSWORD, ROLE_ID, Original_USER_ID, Original_USERNAME, Original_USER_PASSWORD, Original_ROLE_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MEMBERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MEMBER"
            tableMapping.ColumnMappings.Add("MEMBER_ID", "MEMBER_ID")
            tableMapping.ColumnMappings.Add("MEMBER_NAME", "MEMBER_NAME")
            tableMapping.ColumnMappings.Add("MEMBER_ADDRESS", "MEMBER_ADDRESS")
            tableMapping.ColumnMappings.Add("MEMBER_EMAIL", "MEMBER_EMAIL")
            tableMapping.ColumnMappings.Add("MEMBER_PHONE", "MEMBER_PHONE")
            tableMapping.ColumnMappings.Add("MEMBER_PROSHOP", "MEMBER_PROSHOP")
            tableMapping.ColumnMappings.Add("MEMBER_HANDICAP", "MEMBER_HANDICAP")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""MEMBER"" WHERE ((""MEMBER_ID"" = :Original_MEMBER_ID) AND (("& _ 
                ":IsNull_MEMBER_NAME = 1 AND ""MEMBER_NAME"" IS NULL) OR (""MEMBER_NAME"" = :Original"& _ 
                "_MEMBER_NAME)) AND ((:IsNull_MEMBER_ADDRESS = 1 AND ""MEMBER_ADDRESS"" IS NULL) OR"& _ 
                " (""MEMBER_ADDRESS"" = :Original_MEMBER_ADDRESS)) AND ((:IsNull_MEMBER_EMAIL = 1 A"& _ 
                "ND ""MEMBER_EMAIL"" IS NULL) OR (""MEMBER_EMAIL"" = :Original_MEMBER_EMAIL)) AND ((:"& _ 
                "IsNull_MEMBER_PHONE = 1 AND ""MEMBER_PHONE"" IS NULL) OR (""MEMBER_PHONE"" = :Origin"& _ 
                "al_MEMBER_PHONE)) AND ((:IsNull_MEMBER_PROSHOP = 1 AND ""MEMBER_PROSHOP"" IS NULL)"& _ 
                " OR (""MEMBER_PROSHOP"" = :Original_MEMBER_PROSHOP)) AND ((:IsNull_MEMBER_HANDICAP"& _ 
                " = 1 AND ""MEMBER_HANDICAP"" IS NULL) OR (""MEMBER_HANDICAP"" = :Original_MEMBER_HAN"& _ 
                "DICAP)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_EMAIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_EMAIL"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_PHONE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""MEMBER"" (""MEMBER_ID"", ""MEMBER_NAME"", ""MEMBER_ADDRESS"", ""M"& _ 
                "EMBER_EMAIL"", ""MEMBER_PHONE"", ""MEMBER_PROSHOP"", ""MEMBER_HANDICAP"") VALUES (:MEMB"& _ 
                "ER_ID, :MEMBER_NAME, :MEMBER_ADDRESS, :MEMBER_EMAIL, :MEMBER_PHONE, :MEMBER_PROS"& _ 
                "HOP, :MEMBER_HANDICAP)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_EMAIL"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""MEMBER"" SET ""MEMBER_ID"" = :MEMBER_ID, ""MEMBER_NAME"" = :MEMBER_"& _ 
                "NAME, ""MEMBER_ADDRESS"" = :MEMBER_ADDRESS, ""MEMBER_EMAIL"" = :MEMBER_EMAIL, ""MEMBE"& _ 
                "R_PHONE"" = :MEMBER_PHONE, ""MEMBER_PROSHOP"" = :MEMBER_PROSHOP, ""MEMBER_HANDICAP"" "& _ 
                "= :MEMBER_HANDICAP WHERE ((""MEMBER_ID"" = :Original_MEMBER_ID) AND ((:IsNull_MEMB"& _ 
                "ER_NAME = 1 AND ""MEMBER_NAME"" IS NULL) OR (""MEMBER_NAME"" = :Original_MEMBER_NAME"& _ 
                ")) AND ((:IsNull_MEMBER_ADDRESS = 1 AND ""MEMBER_ADDRESS"" IS NULL) OR (""MEMBER_AD"& _ 
                "DRESS"" = :Original_MEMBER_ADDRESS)) AND ((:IsNull_MEMBER_EMAIL = 1 AND ""MEMBER_E"& _ 
                "MAIL"" IS NULL) OR (""MEMBER_EMAIL"" = :Original_MEMBER_EMAIL)) AND ((:IsNull_MEMBE"& _ 
                "R_PHONE = 1 AND ""MEMBER_PHONE"" IS NULL) OR (""MEMBER_PHONE"" = :Original_MEMBER_PH"& _ 
                "ONE)) AND ((:IsNull_MEMBER_PROSHOP = 1 AND ""MEMBER_PROSHOP"" IS NULL) OR (""MEMBER"& _ 
                "_PROSHOP"" = :Original_MEMBER_PROSHOP)) AND ((:IsNull_MEMBER_HANDICAP = 1 AND ""ME"& _ 
                "MBER_HANDICAP"" IS NULL) OR (""MEMBER_HANDICAP"" = :Original_MEMBER_HANDICAP)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_EMAIL"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_ADDRESS"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ADDRESS"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ADDRESS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_EMAIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_EMAIL"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "MEMBER_EMAIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_PHONE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_PHONE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 12
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PHONE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_PROSHOP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_PROSHOP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_HANDICAP"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_HANDICAP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, MEMBER_EMAIL, MEMBER_PHONE, MEMBER"& _ 
                "_PROSHOP, MEMBER_HANDICAP FROM MCC_DEPT.MEMBER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.MEMBERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.MEMBERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.MEMBERDataTable = New MCC_DEPT.MEMBERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.MEMBERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "MEMBER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MEMBER_ID As Decimal, ByVal Original_MEMBER_NAME As String, ByVal Original_MEMBER_ADDRESS As String, ByVal Original_MEMBER_EMAIL As String, ByVal Original_MEMBER_PHONE As String, ByVal Original_MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal Original_MEMBER_HANDICAP As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MEMBER_ID,Decimal)
            If (Original_MEMBER_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MEMBER_NAME,String)
            End If
            If (Original_MEMBER_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MEMBER_ADDRESS,String)
            End If
            If (Original_MEMBER_EMAIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MEMBER_EMAIL,String)
            End If
            If (Original_MEMBER_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MEMBER_PHONE,String)
            End If
            If (Original_MEMBER_PROSHOP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MEMBER_PROSHOP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_MEMBER_HANDICAP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MEMBER_HANDICAP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MEMBER_ID As Decimal, ByVal MEMBER_NAME As String, ByVal MEMBER_ADDRESS As String, ByVal MEMBER_EMAIL As String, ByVal MEMBER_PHONE As String, ByVal MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal MEMBER_HANDICAP As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MEMBER_ID,Decimal)
            If (MEMBER_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MEMBER_NAME,String)
            End If
            If (MEMBER_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MEMBER_ADDRESS,String)
            End If
            If (MEMBER_EMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MEMBER_EMAIL,String)
            End If
            If (MEMBER_PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MEMBER_PHONE,String)
            End If
            If (MEMBER_PROSHOP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MEMBER_PROSHOP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MEMBER_HANDICAP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MEMBER_HANDICAP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MEMBER_ID As Decimal, ByVal MEMBER_NAME As String, ByVal MEMBER_ADDRESS As String, ByVal MEMBER_EMAIL As String, ByVal MEMBER_PHONE As String, ByVal MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal MEMBER_HANDICAP As Global.System.Nullable(Of Decimal), ByVal Original_MEMBER_ID As Decimal, ByVal Original_MEMBER_NAME As String, ByVal Original_MEMBER_ADDRESS As String, ByVal Original_MEMBER_EMAIL As String, ByVal Original_MEMBER_PHONE As String, ByVal Original_MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal Original_MEMBER_HANDICAP As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MEMBER_ID,Decimal)
            If (MEMBER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MEMBER_NAME,String)
            End If
            If (MEMBER_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MEMBER_ADDRESS,String)
            End If
            If (MEMBER_EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MEMBER_EMAIL,String)
            End If
            If (MEMBER_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MEMBER_PHONE,String)
            End If
            If (MEMBER_PROSHOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MEMBER_PROSHOP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MEMBER_HANDICAP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MEMBER_HANDICAP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MEMBER_ID,Decimal)
            If (Original_MEMBER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MEMBER_NAME,String)
            End If
            If (Original_MEMBER_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MEMBER_ADDRESS,String)
            End If
            If (Original_MEMBER_EMAIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MEMBER_EMAIL,String)
            End If
            If (Original_MEMBER_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MEMBER_PHONE,String)
            End If
            If (Original_MEMBER_PROSHOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_MEMBER_PROSHOP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_MEMBER_HANDICAP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_MEMBER_HANDICAP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MEMBER_NAME As String, ByVal MEMBER_ADDRESS As String, ByVal MEMBER_EMAIL As String, ByVal MEMBER_PHONE As String, ByVal MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal MEMBER_HANDICAP As Global.System.Nullable(Of Decimal), ByVal Original_MEMBER_ID As Decimal, ByVal Original_MEMBER_NAME As String, ByVal Original_MEMBER_ADDRESS As String, ByVal Original_MEMBER_EMAIL As String, ByVal Original_MEMBER_PHONE As String, ByVal Original_MEMBER_PROSHOP As Global.System.Nullable(Of Decimal), ByVal Original_MEMBER_HANDICAP As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_MEMBER_ID, MEMBER_NAME, MEMBER_ADDRESS, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_PROSHOP, MEMBER_HANDICAP, Original_MEMBER_ID, Original_MEMBER_NAME, Original_MEMBER_ADDRESS, Original_MEMBER_EMAIL, Original_MEMBER_PHONE, Original_MEMBER_PROSHOP, Original_MEMBER_HANDICAP)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ROLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ROLE"
            tableMapping.ColumnMappings.Add("ROLE_ID", "ROLE_ID")
            tableMapping.ColumnMappings.Add("ROLE_NAME", "ROLE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""ROLE"" WHERE ((""ROLE_ID"" = :Original_ROLE_ID) AND ((:IsNul"& _ 
                "l_ROLE_NAME = 1 AND ""ROLE_NAME"" IS NULL) OR (""ROLE_NAME"" = :Original_ROLE_NAME))"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ROLE_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""ROLE"" (""ROLE_ID"", ""ROLE_NAME"") VALUES (:ROLE_ID, :ROLE_NA"& _ 
                "ME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""ROLE"" SET ""ROLE_ID"" = :ROLE_ID, ""ROLE_NAME"" = :ROLE_NAME WHERE"& _ 
                " ((""ROLE_ID"" = :Original_ROLE_ID) AND ((:IsNull_ROLE_NAME = 1 AND ""ROLE_NAME"" IS"& _ 
                " NULL) OR (""ROLE_NAME"" = :Original_ROLE_NAME)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ROLE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ROLE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ROLE_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ROLE_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ROLE_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ROLE_ID, ROLE_NAME FROM MCC_DEPT.ROLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.ROLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.ROLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.ROLEDataTable = New MCC_DEPT.ROLEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.ROLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "ROLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ROLE_ID As Decimal, ByVal Original_ROLE_NAME As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ROLE_ID,Decimal)
            If (Original_ROLE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ROLE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ROLE_ID As Decimal, ByVal ROLE_NAME As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ROLE_ID,Decimal)
            If (ROLE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ROLE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ROLE_ID As Decimal, ByVal ROLE_NAME As String, ByVal Original_ROLE_ID As Decimal, ByVal Original_ROLE_NAME As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ROLE_ID,Decimal)
            If (ROLE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ROLE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ROLE_ID,Decimal)
            If (Original_ROLE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ROLE_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ROLE_NAME As String, ByVal Original_ROLE_ID As Decimal, ByVal Original_ROLE_NAME As String) As Integer
            Return Me.Update(Original_ROLE_ID, ROLE_NAME, Original_ROLE_ID, Original_ROLE_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SALETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SALE"
            tableMapping.ColumnMappings.Add("SALE_ID", "SALE_ID")
            tableMapping.ColumnMappings.Add("SALE_DATE", "SALE_DATE")
            tableMapping.ColumnMappings.Add("SALE_TOTAL", "SALE_TOTAL")
            tableMapping.ColumnMappings.Add("EMPLOYEE_ID", "EMPLOYEE_ID")
            tableMapping.ColumnMappings.Add("MEMBER_ID", "MEMBER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""SALE"" WHERE ((""SALE_ID"" = :Original_SALE_ID) AND ((:IsNul"& _ 
                "l_SALE_DATE = 1 AND ""SALE_DATE"" IS NULL) OR (""SALE_DATE"" = :Original_SALE_DATE))"& _ 
                " AND ((:IsNull_SALE_TOTAL = 1 AND ""SALE_TOTAL"" IS NULL) OR (""SALE_TOTAL"" = :Orig"& _ 
                "inal_SALE_TOTAL)) AND (""EMPLOYEE_ID"" = :Original_EMPLOYEE_ID) AND (""MEMBER_ID"" ="& _ 
                " :Original_MEMBER_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_SALE_DATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_DATE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""SALE"" (""SALE_ID"", ""SALE_DATE"", ""SALE_TOTAL"", ""EMPLOYEE_ID"& _ 
                """, ""MEMBER_ID"") VALUES (:SALE_ID, :SALE_DATE, :SALE_TOTAL, :EMPLOYEE_ID, :MEMBER"& _ 
                "_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_DATE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""SALE"" SET ""SALE_ID"" = :SALE_ID, ""SALE_DATE"" = :SALE_DATE, ""SAL"& _ 
                "E_TOTAL"" = :SALE_TOTAL, ""EMPLOYEE_ID"" = :EMPLOYEE_ID, ""MEMBER_ID"" = :MEMBER_ID W"& _ 
                "HERE ((""SALE_ID"" = :Original_SALE_ID) AND ((:IsNull_SALE_DATE = 1 AND ""SALE_DATE"& _ 
                """ IS NULL) OR (""SALE_DATE"" = :Original_SALE_DATE)) AND ((:IsNull_SALE_TOTAL = 1 "& _ 
                "AND ""SALE_TOTAL"" IS NULL) OR (""SALE_TOTAL"" = :Original_SALE_TOTAL)) AND (""EMPLOY"& _ 
                "EE_ID"" = :Original_EMPLOYEE_ID) AND (""MEMBER_ID"" = :Original_MEMBER_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_DATE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_SALE_DATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_DATE"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "SALE_DATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_TOTAL"
            param.DbType = Global.System.Data.DbType.[Double]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "SALE_TOTAL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_EMPLOYEE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "EMPLOYEE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_MEMBER_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "MEMBER_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SALE_ID, SALE_DATE, SALE_TOTAL, EMPLOYEE_ID, MEMBER_ID FROM MCC_DEPT.SALE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.SALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.SALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.SALEDataTable = New MCC_DEPT.SALEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.SALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "SALE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SALE_ID As Decimal, ByVal Original_SALE_DATE As String, ByVal Original_SALE_TOTAL As Global.System.Nullable(Of Double), ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_MEMBER_ID As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SALE_ID,Decimal)
            If (Original_SALE_DATE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SALE_DATE,String)
            End If
            If (Original_SALE_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SALE_TOTAL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_EMPLOYEE_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MEMBER_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SALE_ID As Decimal, ByVal SALE_DATE As String, ByVal SALE_TOTAL As Global.System.Nullable(Of Double), ByVal EMPLOYEE_ID As Decimal, ByVal MEMBER_ID As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SALE_ID,Decimal)
            If (SALE_DATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SALE_DATE,String)
            End If
            If (SALE_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SALE_TOTAL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(EMPLOYEE_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(MEMBER_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SALE_ID As Decimal, ByVal SALE_DATE As String, ByVal SALE_TOTAL As Global.System.Nullable(Of Double), ByVal EMPLOYEE_ID As Decimal, ByVal MEMBER_ID As Decimal, ByVal Original_SALE_ID As Decimal, ByVal Original_SALE_DATE As String, ByVal Original_SALE_TOTAL As Global.System.Nullable(Of Double), ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_MEMBER_ID As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SALE_ID,Decimal)
            If (SALE_DATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SALE_DATE,String)
            End If
            If (SALE_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SALE_TOTAL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(EMPLOYEE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MEMBER_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SALE_ID,Decimal)
            If (Original_SALE_DATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SALE_DATE,String)
            End If
            If (Original_SALE_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SALE_TOTAL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_EMPLOYEE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MEMBER_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SALE_DATE As String, ByVal SALE_TOTAL As Global.System.Nullable(Of Double), ByVal EMPLOYEE_ID As Decimal, ByVal MEMBER_ID As Decimal, ByVal Original_SALE_ID As Decimal, ByVal Original_SALE_DATE As String, ByVal Original_SALE_TOTAL As Global.System.Nullable(Of Double), ByVal Original_EMPLOYEE_ID As Decimal, ByVal Original_MEMBER_ID As Decimal) As Integer
            Return Me.Update(Original_SALE_ID, SALE_DATE, SALE_TOTAL, EMPLOYEE_ID, MEMBER_ID, Original_SALE_ID, Original_SALE_DATE, Original_SALE_TOTAL, Original_EMPLOYEE_ID, Original_MEMBER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TRANSACTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.Oracle.OracleDataAdapter
        
        Private _connection As Global.Devart.Data.Oracle.OracleConnection
        
        Private _transaction As Global.Devart.Data.Oracle.OracleTransaction
        
        Private _commandCollection() As Global.Devart.Data.Oracle.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.Oracle.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.Oracle.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.Oracle.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Devart.Data.Oracle.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.Oracle.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.Oracle.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TRANSACTION"
            tableMapping.ColumnMappings.Add("TRANSACTION_ID", "TRANSACTION_ID")
            tableMapping.ColumnMappings.Add("SALE_ID", "SALE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("ITEM_PRICE", "ITEM_PRICE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MCC_DEPT"".""TRANSACTION"" WHERE ((""TRANSACTION_ID"" = :Original_TRANSAC"& _ 
                "TION_ID) AND (""SALE_ID"" = :Original_SALE_ID) AND (""ITEM_ID"" = :Original_ITEM_ID)"& _ 
                " AND ((:IsNull_ITEM_NAME = 1 AND ""ITEM_NAME"" IS NULL) OR (""ITEM_NAME"" = :Origina"& _ 
                "l_ITEM_NAME)) AND ((:IsNull_ITEM_PRICE = 1 AND ""ITEM_PRICE"" IS NULL) OR (""ITEM_P"& _ 
                "RICE"" = :Original_ITEM_PRICE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.Oracle.OracleParameter = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_TRANSACTION_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "TRANSACTION_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MCC_DEPT"".""TRANSACTION"" (""TRANSACTION_ID"", ""SALE_ID"", ""ITEM_ID"", ""IT"& _ 
                "EM_NAME"", ""ITEM_PRICE"") VALUES (:TRANSACTION_ID, :SALE_ID, :ITEM_ID, :ITEM_NAME,"& _ 
                " :ITEM_PRICE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "TRANSACTION_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "TRANSACTION_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.Oracle.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MCC_DEPT"".""TRANSACTION"" SET ""TRANSACTION_ID"" = :TRANSACTION_ID, ""SALE_ID"""& _ 
                " = :SALE_ID, ""ITEM_ID"" = :ITEM_ID, ""ITEM_NAME"" = :ITEM_NAME, ""ITEM_PRICE"" = :ITE"& _ 
                "M_PRICE WHERE ((""TRANSACTION_ID"" = :Original_TRANSACTION_ID) AND (""SALE_ID"" = :O"& _ 
                "riginal_SALE_ID) AND (""ITEM_ID"" = :Original_ITEM_ID) AND ((:IsNull_ITEM_NAME = 1"& _ 
                " AND ""ITEM_NAME"" IS NULL) OR (""ITEM_NAME"" = :Original_ITEM_NAME)) AND ((:IsNull_"& _ 
                "ITEM_PRICE = 1 AND ""ITEM_PRICE"" IS NULL) OR (""ITEM_PRICE"" = :Original_ITEM_PRICE"& _ 
                ")))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "TRANSACTION_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "TRANSACTION_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_TRANSACTION_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "TRANSACTION_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_SALE_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "SALE_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_ID"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.Number
            param.IsNullable = true
            param.SourceColumn = "ITEM_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_NAME"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_NAME"
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.VarChar
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ITEM_NAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "IsNull_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.Oracle.OracleParameter()
            param.ParameterName = "Original_ITEM_PRICE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbType = Global.Devart.Data.Oracle.OracleDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "ITEM_PRICE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.Oracle.OracleConnection()
            Me._connection.ConnectionString = Global.MCC.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.Oracle.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.Oracle.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TRANSACTION_ID, SALE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE FROM MCC_DEPT.TRAN"& _ 
                "SACTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MCC_DEPT.TRANSACTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MCC_DEPT.TRANSACTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MCC_DEPT.TRANSACTIONDataTable = New MCC_DEPT.TRANSACTIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MCC_DEPT.TRANSACTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MCC_DEPT) As Integer
            Return Me.Adapter.Update(dataSet, "TRANSACTION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TRANSACTION_ID As Decimal, ByVal Original_SALE_ID As Decimal, ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TRANSACTION_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SALE_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ITEM_ID,Decimal)
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ITEM_PRICE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TRANSACTION_ID As Decimal, ByVal SALE_ID As Decimal, ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TRANSACTION_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SALE_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ITEM_ID,Decimal)
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ITEM_PRICE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TRANSACTION_ID As Decimal, ByVal SALE_ID As Decimal, ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Integer), ByVal Original_TRANSACTION_ID As Decimal, ByVal Original_SALE_ID As Decimal, ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TRANSACTION_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SALE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ITEM_ID,Decimal)
            If (ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ITEM_NAME,String)
            End If
            If (ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ITEM_PRICE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TRANSACTION_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SALE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ITEM_ID,Decimal)
            If (Original_ITEM_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ITEM_NAME,String)
            End If
            If (Original_ITEM_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ITEM_PRICE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SALE_ID As Decimal, ByVal ITEM_ID As Decimal, ByVal ITEM_NAME As String, ByVal ITEM_PRICE As Global.System.Nullable(Of Integer), ByVal Original_TRANSACTION_ID As Decimal, ByVal Original_SALE_ID As Decimal, ByVal Original_ITEM_ID As Decimal, ByVal Original_ITEM_NAME As String, ByVal Original_ITEM_PRICE As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_TRANSACTION_ID, SALE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, Original_TRANSACTION_ID, Original_SALE_ID, Original_ITEM_ID, Original_ITEM_NAME, Original_ITEM_PRICE)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _eMPLOYEETableAdapter As EMPLOYEETableAdapter
        
        Private _iTEMTableAdapter As ITEMTableAdapter
        
        Private _lOGINTableAdapter As LOGINTableAdapter
        
        Private _mEMBERTableAdapter As MEMBERTableAdapter
        
        Private _rOLETableAdapter As ROLETableAdapter
        
        Private _sALETableAdapter As SALETableAdapter
        
        Private _tRANSACTIONTableAdapter As TRANSACTIONTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EMPLOYEETableAdapter() As EMPLOYEETableAdapter
            Get
                Return Me._eMPLOYEETableAdapter
            End Get
            Set
                Me._eMPLOYEETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ITEMTableAdapter() As ITEMTableAdapter
            Get
                Return Me._iTEMTableAdapter
            End Get
            Set
                Me._iTEMTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOGINTableAdapter() As LOGINTableAdapter
            Get
                Return Me._lOGINTableAdapter
            End Get
            Set
                Me._lOGINTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MEMBERTableAdapter() As MEMBERTableAdapter
            Get
                Return Me._mEMBERTableAdapter
            End Get
            Set
                Me._mEMBERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ROLETableAdapter() As ROLETableAdapter
            Get
                Return Me._rOLETableAdapter
            End Get
            Set
                Me._rOLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SALETableAdapter() As SALETableAdapter
            Get
                Return Me._sALETableAdapter
            End Get
            Set
                Me._sALETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TRANSACTIONTableAdapter() As TRANSACTIONTableAdapter
            Get
                Return Me._tRANSACTIONTableAdapter
            End Get
            Set
                Me._tRANSACTIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._eMPLOYEETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eMPLOYEETableAdapter.Connection) Is Nothing)) Then
                    Return Me._eMPLOYEETableAdapter.Connection
                End If
                If ((Not (Me._iTEMTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iTEMTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iTEMTableAdapter.Connection
                End If
                If ((Not (Me._lOGINTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOGINTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOGINTableAdapter.Connection
                End If
                If ((Not (Me._mEMBERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mEMBERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mEMBERTableAdapter.Connection
                End If
                If ((Not (Me._rOLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rOLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._rOLETableAdapter.Connection
                End If
                If ((Not (Me._sALETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sALETableAdapter.Connection) Is Nothing)) Then
                    Return Me._sALETableAdapter.Connection
                End If
                If ((Not (Me._tRANSACTIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tRANSACTIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tRANSACTIONTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rOLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sALETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As MCC_DEPT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rOLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ROLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rOLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EMPLOYEE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eMPLOYEETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MEMBER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mEMBERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ITEM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iTEMTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sALETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SALE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sALETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOGIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOGINTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TRANSACTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tRANSACTIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As MCC_DEPT, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._rOLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ROLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rOLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EMPLOYEE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eMPLOYEETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MEMBER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mEMBERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ITEM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iTEMTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sALETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SALE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sALETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOGIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOGINTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TRANSACTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tRANSACTIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As MCC_DEPT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TRANSACTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tRANSACTIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOGIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOGINTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sALETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SALE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sALETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ITEM.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iTEMTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MEMBER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mEMBERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EMPLOYEE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eMPLOYEETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rOLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ROLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rOLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As MCC_DEPT) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._eMPLOYEETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eMPLOYEETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iTEMTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iTEMTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOGINTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOGINTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mEMBERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mEMBERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rOLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rOLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sALETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sALETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tRANSACTIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tRANSACTIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eMPLOYEETableAdapter, Me._eMPLOYEETableAdapter.Connection)
                    Me._eMPLOYEETableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._eMPLOYEETableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._eMPLOYEETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eMPLOYEETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eMPLOYEETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iTEMTableAdapter, Me._iTEMTableAdapter.Connection)
                    Me._iTEMTableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._iTEMTableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._iTEMTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iTEMTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iTEMTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOGINTableAdapter, Me._lOGINTableAdapter.Connection)
                    Me._lOGINTableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._lOGINTableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._lOGINTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOGINTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOGINTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mEMBERTableAdapter, Me._mEMBERTableAdapter.Connection)
                    Me._mEMBERTableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._mEMBERTableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._mEMBERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mEMBERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mEMBERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rOLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rOLETableAdapter, Me._rOLETableAdapter.Connection)
                    Me._rOLETableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._rOLETableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._rOLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rOLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rOLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sALETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sALETableAdapter, Me._sALETableAdapter.Connection)
                    Me._sALETableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._sALETableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._sALETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sALETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sALETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tRANSACTIONTableAdapter, Me._tRANSACTIONTableAdapter.Connection)
                    Me._tRANSACTIONTableAdapter.Connection = CType(workConnection,Global.Devart.Data.Oracle.OracleConnection)
                    Me._tRANSACTIONTableAdapter.Transaction = CType(workTransaction,Global.Devart.Data.Oracle.OracleTransaction)
                    If Me._tRANSACTIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tRANSACTIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tRANSACTIONTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._eMPLOYEETableAdapter) Is Nothing) Then
                    Me._eMPLOYEETableAdapter.Connection = CType(revertConnections(Me._eMPLOYEETableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._eMPLOYEETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iTEMTableAdapter) Is Nothing) Then
                    Me._iTEMTableAdapter.Connection = CType(revertConnections(Me._iTEMTableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._iTEMTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOGINTableAdapter) Is Nothing) Then
                    Me._lOGINTableAdapter.Connection = CType(revertConnections(Me._lOGINTableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._lOGINTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mEMBERTableAdapter) Is Nothing) Then
                    Me._mEMBERTableAdapter.Connection = CType(revertConnections(Me._mEMBERTableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._mEMBERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rOLETableAdapter) Is Nothing) Then
                    Me._rOLETableAdapter.Connection = CType(revertConnections(Me._rOLETableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._rOLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sALETableAdapter) Is Nothing) Then
                    Me._sALETableAdapter.Connection = CType(revertConnections(Me._sALETableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._sALETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tRANSACTIONTableAdapter) Is Nothing) Then
                    Me._tRANSACTIONTableAdapter.Connection = CType(revertConnections(Me._tRANSACTIONTableAdapter),Global.Devart.Data.Oracle.OracleConnection)
                    Me._tRANSACTIONTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
